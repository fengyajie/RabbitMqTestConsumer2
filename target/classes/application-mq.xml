<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/rabbit
                           http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <description>rabbitmq 连接服务配置</description>
    
    <!-- 4.扫描web相关的bean -->
	 <!-- <context:component-scan base-package="com.fengyj.*" /> -->
    <!-- 连接配置 -->
    <rabbit:connection-factory id="connectionFactory" host="127.0.0.1" username="guest" virtual-host="/" password="guest" />
    
    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 如果使用多exchange必须配置declared-by="rabbitAdmin" -->
   <!--  <rabbit:admin id="rabbitAdmin" connection-factory="connectionFactory"/> -->

    <!-- spring template声明-->
    <!-- retryTemplate为连接失败时的重发队列所用的template -->
    <!-- 使用return-callback时必须设置mandatory为true -->
    <rabbit:template 
              id="amqpTemplate"
              exchange="test-mq-exchange"  
              connection-factory="connectionFactory"
              reply-timeout="2000"
                     encoding="UTF-8"/>
                     
                   <!--   <bean id="msgSendConfirmCallBack" class="com.fengyj.MsgSendConfirmCallBack"/>
                     <bean id="msgReturnCallback" class="com.fengyj.MsgReturnCallback"/> -->
     
     <!-- 声明消息转换器为SimpleMessageConverter -->
   <!--  <bean id="msgConverter" class="org.springframework.amqp.support.converter.SimpleMessageConverter" /> -->

    
   <!-- 180秒 -->  
<!--     <rabbit:template id="amqpTemplate" reply-timeout="1000" connection-factory="rabbitConnFactory" message-converter="jsonMessageConverter" />
 -->    <!-- <rabbit:queue id="test_queue_key" name="test_queue_key" durable="true" auto-delete="false" exclusive="false" />  -->
   
   <!-- queue配置 -->
     <!-- durable:是否持久化 -->
      <!-- exclusive: 仅创建者可以使用的私有队列，断开后自动删除 -->
      <!-- auto_delete: 当所有消费客户端连接断开后，是否自动删除队列 -->
  <!--  <rabbit:queue name="xxx" durable="true" auto-delete="false" exclusive="false">
         <rabbit:queue-arguments>
            <entry key="x-message-ttl" value="30000" value-type="java.lang.Long"/>
        </rabbit:queue-arguments>
    </rabbit:queue>
     
    <rabbit:queue name="xxx-1" durable="true" auto-delete="false" exclusive="false">
         <rabbit:queue-arguments>
            <entry key="x-message-ttl" value="30000" value-type="java.lang.Long"/>
        </rabbit:queue-arguments>
    </rabbit:queue>
    
    <rabbit:queue name="xxx-2" durable="true" auto-delete="false" exclusive="false">
         <rabbit:queue-arguments>
            <entry key="x-message-ttl" value="30000" value-type="java.lang.Long"/>
        </rabbit:queue-arguments>
    </rabbit:queue> -->
   
    <!-- 交换机定义 -->
    <!-- 如果使用多exchange必须配置declared-by="rabbitAdmin" -->
     <!-- exchange配置 -->
     <!-- rabbit:direct-exchange：定义exchange模式为direct，意思就是消息与一个特定的路由键完全匹配，才会转发。 -->
      <!-- rabbit:binding：设置消息queue匹配的key -->
    <!-- <rabbit:direct-exchange name="test-mq-exchange" durable="true" auto-delete="false" declared-by="">
    <rabbit:bindings>
        <rabbit:binding queue="xxx" key="xxx"/>
         <rabbit:binding queue="xxx-1" key="xxx-1"/>
          <rabbit:binding queue="xxx-2" key="xxx-2"/>
    </rabbit:bindings>
</rabbit:direct-exchange> -->

   <bean id="messageConverter" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"/>
   
<!-- queue litener  观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象-->
<!-- queues：监听的队列，多个的话用逗号（,）分隔 ref：监听器 -->
<!-- acknowledge=auto：消费者自动接收,manual:手动确认 ,自动确认，接收到信息后，消息从队列删除；手动确认：手动确认之后才会删除-->
    <rabbit:listener-container   connection-factory="connectionFactory" acknowledge="manual">
    <rabbit:listener  queue-names="xxx" method="onMessage" ref="rabbmitmqQueueListener"/>
    <rabbit:listener queue-names="xxx-1" method="onMessage" ref="rabbmitmqQueueListener"/>
    <rabbit:listener queue-names="xxx-2" method="onMessage" ref="rabbmitmqQueueListener"/>
    </rabbit:listener-container>

    <bean id="rabbmitmqQueueListener" class="com.fengyj.QueueListener" />


<!-- <bean id="mQProducerImpl" class="com.fengyj.MQProducerImpl"/> -->

</beans>